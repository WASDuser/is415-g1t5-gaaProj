---
title: "Data Wrangling"
author: William Tan Juin Wei, Marcus Jaeson Yeo, Santhya Thirumarai Selvan
date: "October 1, 2024"
date-modified: "last-modified"
---

```{r}
pacman::p_load(sf, tidyverse, tmap) # add as needed
```

```{r}
crime_sf <- read_csv('data/aspatial/crime_district.csv')
```

```{r}
glimpse(crime_sf)
```

```{r}
unique(crime_sf$state)
```

```{r}
unique(crime_sf$district)
```

```{r}
unique(crime_sf$category)
```

```{r}
cat_crime <- ggplot(data=crime_sf, 
             aes(x= `category`)) +
  geom_bar(bins=20, 
                 color="black", 
                 fill="light blue")
cat_crime
```

```{r}
unique(crime_sf$type)
```

```{r}
unique(crime_sf$crimes)
```

```{r}
# overall
plot(crime_sf$crimes)
```

```{r}
# Assault (entire M'sia, all types)
crime_sf[1:7,]

# Assault by type (entire M'sia)
crime_sf[8:56,]

# Property (entire M'sia, all types)
crime_sf[57:63,]

# Property by type (entire M'sia)
crime_sf[64:98,]

# when extracting rows, filter out the 'all' type and 'All' type, pattern seen above

# potential 
```

```{r}
msia_adm1 <- st_read(dsn = 'data/geospatial/mys_adm_unhcr_20210211_shp/', layer = 'mys_admbnda_adm1_unhcr_20210211')
msia_adm2 <- st_read(dsn = 'data/geospatial/mys_adm_unhcr_20210211_shp/', layer = 'mys_admbnda_adm2_unhcr_20210211')
```

```{r}
tmap_mode('plot')
```

```{r}
tm_shape(msia_adm1) + tm_polygons()
```

```{r}
tm_shape(msia_adm2) + tm_polygons()
```

------ NEW WRANGLING —–

Loading in the Packages

```{r}
pacman::p_load(spdep, tmap, sf, ClustGeo, ggpubr, cluster, factoextra, NbClust, heatmaply, corrplot, psych, tidyverse, GGally)
```

Load in the aspatial and spatial data.

```{r}
crime_district <- read_csv("data/aspatial/crime_district.csv")
population_district <- read_csv("data/aspatial/population_district.csv")
msia_adm2_sf <- st_read(dsn = 'data/geospatial', layer = 'mys_admbnda_adm2_unhcr_20210211')
```

formatting the crime data to only include the state names and their respective districts. Also filter out the rows where the data is aggregated across the crime types, as well as across the districts. Since population data is from 2016-2022, we will also remove the 2023 date rows.

```{r}
crime_district <- crime_district %>% 
    filter(state != "Malaysia") %>% 
    filter(category == "assault") %>% 
    filter(district != "All") %>% 
    filter(type != "all") 
```

formatting the population data table to be simpler

```{r}
library(dplyr)
library(lubridate)

# population_state_filtered <- 
pop_data <- population_district %>%
    filter(year(ymd(date)) >= 2016 & year(ymd(date)) <= 2023) %>% 
    filter(sex == 'both') %>% 
    filter(age == 'overall') %>% 
    filter(ethnicity == 'overall') %>% 
    select(-c(3:5))
```

formatting the district boundary sf by dropping unnecessary columns

```{r}
adm2_sf <- msia_adm2_sf %>% select(-c(3:5, 8,9,11,12))
```

Upon visual inspection of the data, we noticed some clear discrepancies among the districts column of all the dataframes. Hence, we decided to check for the unique districts in each of the dataframe.

```{r}
unique(pop_data$district)

```

```{r}
unique(adm2_sf$ADM2_EN)

```

```{r}
unique(crime_district$district)
```

As expected, all the dataframes contained different numbers of districts. There were also lots of discrepancies to be handled; differing spelling/naming conventions, splitting of districts into north/south regions, and totally missing districts.

As little can be done in salvaging missing districts, we decided to handle the other forms of discrepancies.

First, we will convert all the district names to lowercase letters to eliminate any errors on that front, and to standardise the naming conventions.

```{r}
crime_district$district <- tolower(trimws(crime_district$district))
adm2_sf$ADM2_EN <- tolower(trimws(adm2_sf$ADM2_EN))
pop_data$district <- tolower(trimws(pop_data$district))

```

Since our main focus was crime data and it was the dataframe that will be mutually connected to both the boundary layer and the population data (phrase better), we will use the districts in the crime dataframe as a guide to formatting the other tables.

We first started off by handling the very obvious differences that could be observed through visual inspection as well as through the use of the unique function. We noticed that 2 districts, Johor Bahru and Klang, were split up in the crime dataframe. Hence, we merged these rows and summed up their crime number values.

str_detect() function of the stringr package was used to identify rows that contained the given input string. In our case, it was the district name. mutate() was then used to change the values of these rows. Since this produces a new dataframe, another dataframe was created with the rest of the values, before all three were bound together.

```{r}
library(stringr)
crime_johor<- crime_district %>%
  filter(str_detect(district,"johor bahru")) %>%
  mutate(district = 'johor bahru') %>%
  group_by(state, district,type, date) %>%
  summarise(crimes = sum(crimes))

crime_klang<- crime_district %>%
  filter(str_detect(district,"klang")) %>%
  mutate(district = 'klang') %>%
  group_by(state, district,type, date) %>%
  summarise(crimes = sum(crimes))


other_rows <- crime_district %>% 
  filter(!str_detect(district, "johor bahru"))

crime_district <- bind_rows(crime_johor, crime_klang, other_rows) %>% 
  select(-c(6)) %>% 
  mutate(category = 'assault')
```

Next, we sought to isolate the districts in the other dataframes that were still not matching with that of the crimes dataframe. To do this, a left join of the tables were performed, before the NA rows were extracted and saved in a separate dataframe.

```{r}
pop_crime<- left_join(pop_data, crime_district, by= "district")
pop_crime_na<- pop_crime[rowSums(is.na(pop_crime)) > 0,]

```

```{r}
adm_crime <- left_join(adm2_sf, crime_district, by= c("ADM2_EN" = "district"))
adm_crime_na <- adm_crime[rowSums(is.na(adm_crime)) > 0,]
```

This made it easier for identifying dissimilarities, although it was still tedious. After much close comparisons, we managed to identify a handful of spelling and formatting errors across the three dataframes. Hence, we made changes to these rows.

```{r}
crime_district<- crime_district%>% 
  mutate(district = ifelse(district == "cameron highland", "cameron highlands", district)) %>% 
  mutate(district = ifelse(district == "kuala lipis", "lipis", district)) %>% 
  mutate(district = ifelse(district == "kota kinabatangan", "kinabatangan", district)) %>% 
  mutate(district = ifelse(district == "seberang perai tengah", "s.p. tengah", district)) %>% 
  mutate(district = ifelse(district == "seberang perai utara", "s.p. utara", district)) %>% 
  mutate(district = ifelse(district == "seberang perai selatan", "s.p.selatan", district)) %>% 
  mutate(district = ifelse(district == "petaling jaya", "petaling", district)) %>% 
   mutate(district = ifelse(district == "matu daro", "matu", district))
  

pop_data <- pop_data %>% 
  mutate(district = ifelse(district == "kulai", "kulaijaya", district)) %>% 
  mutate(district = ifelse(district == "sp tengah", "s.p. tengah", district)) %>% 
  mutate(district = ifelse(district == "sp utara", "s.p. utara", district)) %>% 
  mutate(district = ifelse(district == "sp selatan", "s.p.selatan", district)) %>%
  mutate(district = ifelse(district == "cameron highland", "cameron highlands", district))
  
```

Once this was done, we isolated the NA values once again. The remaining districts are districts that were missing from one or more of the dataframes, and would have to be removed from the analysis due to the missing data.

```{r}

pop_crime<- left_join(pop_data, crime_district, by= "district")
pop_crime_na<- pop_crime[rowSums(is.na(pop_crime)) > 0,]

drop_list_pop <- pop_crime_na$district
pop_data <- pop_data %>%
  filter(!(district %in% drop_list_pop))
```

```{r}
adm_crime <- left_join(adm2_sf, crime_district, by= c("ADM2_EN" = "district"))
adm_crime_na <- adm_crime[rowSums(is.na(adm_crime)) > 0,]
drop_list <- adm_crime_na$ADM2_EN
adm2_sf <- adm2_sf %>% 
  filter(!(ADM2_EN %in% drop_list))
```

Now, we would be able to join the dataframes smoothly.

```{r}
write_rds(pop_data, "data/rds/pop_data.rds")
write_rds(crime_district, "data/rds/crime_district.rds")
write_rds(adm2_sf, "data/rds/adm2_sf.rds")
```

```{r}
pop_data<- read_rds("data/rds/pop_data.rds")
crime_district <- read_rds("data/rds/crime_district.rds")
adm2_sf <- read_rds("data/rds/adm2_sf.rds")

```
